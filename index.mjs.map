{"version":3,"file":"index.mjs","sources":["../lib/index_of_types.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the first row index at which a given one-dimensional array of types can be found in a two-dimensional reference array of types (or `-1` if not found).\n*\n* ## Notes\n*\n* -   The intended use case for this function is for type dispatch (i.e., given a set of array data types, find a matching interface according the interface's accepted array data types).\n* -   The function assumes that `x` is stored in row-major order.\n* -   The function assumes that the number of indexed elements in `y` equals the number of columns in `x`.\n* -   The function returns a row index. To convert to a linear index, multiply `strideX1` by the return value.\n*\n* @private\n* @param {NonNegativeInteger} N - number of rows in `x` (size of first dimension)\n* @param {NonNegativeInteger} M - number of columns in `x` (size of second dimension)\n* @param {ArrayLikeObject} x - input two-dimensional reference array\n* @param {integer} strideX1 - `x` stride length along first dimension\n* @param {integer} strideX2 - `x` stride length along second dimension\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {ArrayLikeObject} y - search array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {integer} row index (if found) and `-1` otherwise\n*\n* @example\n* // Define a reference array to search:\n* var types = [\n*     'float64', 'float64', 'float64',\n*     'float32', 'float32', 'float32',\n*     'uint32', 'uint32', 'float64',\n*     'int32', 'int32', 'float64',\n*     'uint16', 'uint16', 'float64',\n*     'int16', 'int16', 'float64',\n*     'uint8', 'uint8', 'float64',\n*     'int8', 'int8', 'float64'\n* ];\n*\n* // Define reference array dimensions:\n* var N = 8; // rows\n* var M = 3; // columns\n*\n* // Define a search array:\n* y1 = [\n*     'float32', 'float32', 'float32',\n* ];\n*\n* // Find the list of types:\n* var r1 = indexOfTypes( N, M, types, M, 1, 0, y1, 1, 0 );\n* // returns 1\n*\n// Define a search array:\n* y2 = [\n*     'float32', 'float32', 'float64',\n* ];\n*\n* // Find the list of types:\n* var r2 = indexOfTypes( N, M, types, M, 1, 0, y2, 1, 0 );\n* // returns -1\n*/\nfunction indexOfTypes( N, M, x, strideX1, strideX2, offsetX, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\t// Search for the first row which matches `y`...\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tiy = offsetY;\n\t\tfor ( j = 0; j < M; j++ ) {\n\t\t\tif ( x[ ix+(j*strideX2) ] !== y[ iy ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tiy += strideY;\n\t\t}\n\t\t// If we successfully iterated over all columns, then that means we've found a match...\n\t\tif ( j === M ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX1;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default indexOfTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isFunctionArray from '@stdlib/assert-is-function-array';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/string-format';\nimport abs from '@stdlib/math-base-special-abs';\nimport indexOfTypes from './index_of_types.js';\n\n\n// MAIN //\n\n/**\n* Returns a strided array function interface which accepts a callback function and performs multiple dispatch.\n*\n* @param {(FunctionArray|Function)} fcns - list of strided array functions\n* @param {Collection} types - one-dimensional list of strided array argument data types\n* @param {(Collection|null)} data - strided array function data (e.g., callbacks)\n* @param {PositiveInteger} nargs - total number of strided array function interface arguments (including data types, strides, offsets, and the callback function)\n* @param {NonNegativeInteger} nin - number of input strided arrays\n* @param {NonNegativeInteger} nout - number of output strided arrays\n* @throws {TypeError} first argument must be either a function or an array of functions\n* @throws {TypeError} second argument must be an an array-like object\n* @throws {TypeError} third argument must be an array-like object or `null`\n* @throws {Error} third and first arguments must have the same number of elements\n* @throws {TypeError} fourth argument must be a positive integer\n* @throws {TypeError} fifth argument must be a nonnegative integer\n* @throws {TypeError} sixth argument must be a nonnegative integer\n* @throws {Error} fourth argument must be compatible with the specified number of input and output arrays\n* @throws {Error} number of types must match the number of functions times the total number of array arguments for each function\n* @throws {Error} interface must accept at least one strided input and/or output array\n* @returns {Function} strided array function interface\n*\n* @example\n* import unaryBy from '@stdlib/strided-base-unary-by';\n* import abs from '@stdlib/math-base-special-abs';\n* import identity from '@stdlib/math-base-special-identity';\n* import Float64Array from '@stdlib/array-float64';\n*\n* var types = [\n*     'float64', 'float64'\n* ];\n*\n* var data = [\n*     abs\n* ];\n*\n* var strided = dispatchBy( unaryBy, types, data, 8, 1, 1 );\n*\n* // ...\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* strided( x.length, 'float64', x, 1, 'float64', y, 1, identity );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dispatchBy( fcns, types, data, nargs, nin, nout ) {\n\tvar strideArgs;\n\tvar hasOffsets;\n\tvar narrays;\n\tvar nfcns;\n\tvar iout;\n\tvar fcn;\n\n\tif ( isFunction( fcns ) ) {\n\t\tfcn = fcns;\n\t} else if ( !isFunctionArray( fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a function or an array of functions. Value: `%s`.', fcns ) );\n\t}\n\tif ( !isCollection( types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', types ) );\n\t}\n\tif ( !isCollection( data ) && data !== null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object or null. Value: `%s`.', data ) );\n\t}\n\tif ( !isPositiveInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a positive integer. Value: `%s`.', nargs ) );\n\t}\n\tif ( !isNonNegativeInteger( nin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%s`.', nin ) );\n\t}\n\tif ( !isNonNegativeInteger( nout ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Sixth argument must be a nonnegative integer. Value: `%s`.', nout ) );\n\t}\n\tnarrays = nin + nout;\n\tif ( narrays === 0 ) {\n\t\tthrow new Error( 'invalid arguments. Interface must accept at least one strided input and/or output array. Based on the provided arguments, `nin+nout` equals `0`.' );\n\t}\n\tif ( fcn ) {\n\t\tnfcns = types.length / narrays;\n\t\tif ( !isInteger( nfcns ) ) {\n\t\t\tthrow new Error( 'invalid argument. Unexpected number of types. A type must be specified for each strided input and output array for each provided strided array function.' );\n\t\t}\n\t} else {\n\t\tnfcns = fcns.length;\n\t\tif ( types.length !== nfcns*narrays ) {\n\t\t\tthrow new Error( 'invalid argument. Unexpected number of types. A type must be specified for each strided input and output array for each provided strided array function.' );\n\t\t}\n\t}\n\tif ( data && data.length !== nfcns ) {\n\t\tthrow new Error( 'invalid argument. The third argument must have the same number of elements as the first argument.' );\n\t}\n\t// Determine whether the strided array interface includes offsets:\n\tif ( (narrays*3)+2 === nargs ) {\n\t\thasOffsets = false;\n\t} else if ( (narrays*4)+2 === nargs ) {\n\t\thasOffsets = true;\n\t} else {\n\t\tthrow new Error( 'invalid argument. Fourth argument is incompatible with the number of strided input and output arrays.' );\n\t}\n\t// Determine the \"stride\" for accessing related arguments:\n\tif ( hasOffsets ) {\n\t\tstrideArgs = 4;\n\t} else {\n\t\tstrideArgs = 3;\n\t}\n\t// Compute the index of the first output strided array argument:\n\tiout = ( nin*strideArgs ) + 1;\n\n\treturn dispatcher;\n\n\t/**\n\t* Strided array function interface which performs multiple dispatch.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - data type for `x`\n\t* @param {Collection} x - strided array\n\t* @param {integer} strideX - index increment for `x`\n\t* @param {...(Collection|integer|NonNegativeInteger)} args - array arguments (data types, arrays, strides, and offsets)\n\t* @param {Callback} clbk - callback function\n\t* @param {*} [thisArg] - callback function execution context\n\t* @throws {Error} insufficient arguments\n\t* @throws {Error} too many arguments\n\t* @throws {TypeError} first argument must be an integer\n\t* @throws {TypeError} input array strides must be integers\n\t* @throws {TypeError} output array strides must be integers\n\t* @throws {TypeError} input array offsets must be nonnegative integers\n\t* @throws {TypeError} output array offsets must be nonnegative integers\n\t* @throws {TypeError} input array arguments must be array-like objects\n\t* @throws {TypeError} output array arguments must be array-like objects\n\t* @throws {RangeError} input array arguments must have sufficient elements based on the associated stride and the number of indexed elements\n\t* @throws {RangeError} output array arguments must have sufficient elements based on the associated stride and the number of indexed elements\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @throws {TypeError} callback argument must be a function\n\t* @returns {(Collection|Array<Collection>|void)} destination array(s)\n\t*/\n\tfunction dispatcher() {\n\t\tvar strides;\n\t\tvar offsets;\n\t\tvar thisArg;\n\t\tvar arrays;\n\t\tvar dtypes;\n\t\tvar shape;\n\t\tvar argc;\n\t\tvar clbk;\n\t\tvar idx;\n\t\tvar N;\n\t\tvar v;\n\t\tvar f;\n\t\tvar i;\n\t\tvar j;\n\n\t\targc = arguments.length;\n\t\tif ( argc !== nargs ) {\n\t\t\tif ( argc < nargs ) {\n\t\t\t\tthrow new Error( 'invalid invocation. Insufficient arguments.' );\n\t\t\t}\n\t\t\t// Check for a callback execution context argument...\n\t\t\tif ( argc === nargs+1 ) {\n\t\t\t\targc -= 1;\n\t\t\t\tthisArg = arguments[ argc ];\n\t\t\t} else {\n\t\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t\t}\n\t\t}\n\t\tN = arguments[ 0 ];\n\t\tif ( !isInteger( N ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', N ) );\n\t\t}\n\t\tshape = [ N ];\n\n\t\tclbk = arguments[ argc-1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\t// data types for both input and output strided arrays are every `strideArgs` arguments beginning from the second argument...\n\t\tdtypes = [];\n\t\tfor ( i = 1; i < nargs; i += strideArgs ) {\n\t\t\tdtypes.push( arguments[ i ] );\n\t\t}\n\n\t\t// Strides for both input and output strided arrays are every `strideArgs` arguments beginning from the fourth argument...\n\t\tstrides = [];\n\t\tfor ( i = 3; i < nargs; i += strideArgs ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( !isInteger( v ) ) {\n\t\t\t\tif ( i < iout ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Input array stride must be an integer. Value: `%s`.', v ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Output array stride must be an integer. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tstrides.push( v );\n\t\t}\n\t\tif ( hasOffsets ) {\n\t\t\t// Offsets for both input and output strided arrays are every `strideArgs` arguments beginning from the fifth argument...\n\t\t\toffsets = [];\n\t\t\tfor ( i = 4; i < nargs; i += strideArgs ) {\n\t\t\t\tv = arguments[ i ];\n\t\t\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\t\t\tif ( i < iout ) {\n\t\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Input array offset must be a nonnegative integer. Value: `%s`.', v ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Output array offset must be a nonnegative integer. Value: `%s`.', v ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toffsets.push( v );\n\t\t\t}\n\t\t}\n\t\t// Input and output strided arrays are every `strideArgs` arguments beginning from the third argument...\n\t\tarrays = [];\n\t\tfor ( i = 2; i < nargs; i += strideArgs ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( !isCollection( v ) ) {\n\t\t\t\tif ( i < iout ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Input array must be an array-like object. Value: `%s`.', v ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Output array must be an array-like object. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tj = (i-2) / strideArgs;\n\t\t\tif ( hasOffsets ) {\n\t\t\t\tidx = offsets[ j ] + ( (N-1)*strides[j] );\n\t\t\t\tif ( N > 0 && (idx < 0 || idx >= v.length) ) {\n\t\t\t\t\tif ( i < iout ) {\n\t\t\t\t\t\tthrow new RangeError( 'invalid argument. Input array has insufficient elements based on the associated stride and the number of indexed elements.' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new RangeError( 'invalid argument. Output array has insufficient elements based on the associated stride and the number of indexed elements.' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( (N-1)*abs(strides[j]) >= v.length ) {\n\t\t\t\tif ( i < iout ) {\n\t\t\t\t\tthrow new RangeError( 'invalid argument. Input array has insufficient elements based on the associated stride and the number of indexed elements.' );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RangeError( 'invalid argument. Output array has insufficient elements based on the associated stride and the number of indexed elements.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tarrays.push( v );\n\t\t}\n\t\t// Resolve the strided array function satisfying the input array types:\n\t\tidx = indexOfTypes( nfcns, narrays, types, narrays, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\n\t\t// Check whether we were able to successfully resolve a strided array function:\n\t\tif ( idx < 0 ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\t// Retrieve the strided array function:\n\t\tif ( fcn ) {\n\t\t\tf = fcn;\n\t\t} else {\n\t\t\tf = fcns[ idx ];\n\t\t}\n\t\t// Evaluate the strided array function:\n\t\tif ( data ) {\n\t\t\tif ( hasOffsets ) {\n\t\t\t\tf( arrays, shape, strides, offsets, data[ idx ], clbk, thisArg ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tf( arrays, shape, strides, data[ idx ], clbk, thisArg );\n\t\t\t}\n\t\t} else if ( hasOffsets ) {\n\t\t\tf( arrays, shape, strides, offsets, clbk, thisArg );\n\t\t} else {\n\t\t\tf( arrays, shape, strides, clbk, thisArg );\n\t\t}\n\t\tif ( nout === 1 ) {\n\t\t\treturn arrays[ narrays-1 ];\n\t\t}\n\t\tif ( nout === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\treturn arrays.slice( nin );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dispatchBy;\n"],"names":["indexOfTypes","N","M","x","strideX1","strideX2","offsetX","y","strideY","offsetY","ix","iy","i","j","dispatchBy","fcns","types","data","nargs","nin","nout","strideArgs","hasOffsets","narrays","nfcns","iout","fcn","isFunction","isFunctionArray","TypeError","format","isCollection","isPositiveInteger","isNonNegativeInteger","Error","length","isInteger","strides","offsets","thisArg","arrays","dtypes","shape","argc","clbk","idx","v","f","arguments","push","RangeError","abs","slice"],"mappings":"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"}